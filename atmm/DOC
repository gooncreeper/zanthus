Architecture, Thread, and Memory Manager

/// NOTICE:
/// This document is still work-in-progress and its current only purpose is to
/// give a preview of what the interface will look like and potentially collect
/// feedback.

----
TODO
----
Write the document!

--------
Document
--------
This document specifies the behavior and API of ATMM. Take note of the following
special text features.

-------
SECTION
-------

%%%%%%%%%%%
SUB-SECTION
%%%%%%%%%%%

[[ RATIONALE AND EXTRA INFORMATION ]]

0xHEX                Hexadecimal value
HEXh                 Hexadecimal value
%PARAMETER           Value of paramater to syscall
?PARAMATER           Paramater is optional (-1 for unused)
&RETURN              Value of return to syscall or global value (ex. elapsed time)
~VALUE               Bitwise not of pword_t sized value
*VARIABLE            Variable is a pointer
*PARAMTER|*PARAMATER Varying pointer, left is data in a page, right is to an
                     object
                     [[ Essentially userspace or kernel memory ]]
VARIABLE[]           Variable is a pointer to an array
VARIABLE[x..y]       Elements x to y of variable array
VARIABLE[x:y]        Bits of variable from LSB y to LSB x.
                     [[ (VARIABLE >> y) & ((1 << x) - 1) ]]
VARIABLE[:y]         Bits of variable starting from LSB Y
                     [[ (VARIABLE >> y) ]]
VARIABLE.FIELD       Field of variable (specified in Section: Structures)


--------
Syscalls
--------
This section lists all the syscalls and their arguments. Each syscall is format
-ed as follows.

NUMBER: RETURN1, RETURN2 = SYSCALL(PARAMATERS, ...) [VALID ARGS, ...]

All syscalls have a maximum of four arguments and always two returns. The second
return can indicate an error if the value is greater than or equal to ~0xFFFF.

[[ Note: Since we cannot encode 0 args, on syscalls where 0 args would be useful
   we add a preliminary `ignored` argument. (This argument is not special in any
   other way) ]]
[[ Rationale: most syscalls are designed to have RETURN1 as PARAMATER1 and
   RETURN2 as PARAMATER2 since most architectures' syscall calling conventions
   have these registers aliasing.

System Info
00h: *sysinfo  , size  = sysinfoptr(ignored)                           [1, , , ]
01h: msyscall[], count = syscall(msyscall[], count)                    [1,2, , ]
02h: timeFrac  , time  = srdtime(ignored)                              [1, , , ]

System Config
10h: timeFrac, time = selapse (timeFrac, time)                         [1,2, , ]
18h: addrLow , size = smemnew (addrLow , size, flags, addrHigh)        [1,2,3,4]
19h: addrLow , size = smeminv (addrLow , size, flags, addrHigh)        [1,2,3,4]
20h: addrLow , size = smemfinv(addrLow , size, flags, addrHigh)        [1,2,3,4]

Object
20h: count, *addr   = osuggest(count, flags, xsize, *allocParams)      [1,2,3,4]
21h: count, *obj    = oalloc  (count, flags, xsize, *addr)             [1,2,3,4]
22h: *addr, size    = oreserve(*addr, size)                            [1,2, , ]
23h: *obj , count   = ofree   (*obj , count)                           [1,2, , ]
24h: *obj1, *obj2   = oxchg(*obj1, count, flags, *allocParams|*obj2)   [1,2,3,4]
25h: *obj , *newObj = ocopy(*obj , count, flags, *allocParams|*newObj) [1,2,3,4]

28h: *obj   , isNative = onative(*obj, *rspace)                        [1, , , ]
29h: *buffer, read      = oxread (*buffer, *obj, size, offset)         [ ,2,3,4]
2Ah: *buffer, written   = oxwrite(*buffer, *obj, size, offset)         [ ,2,3,4]

2eh: filled, *stop = oreservelist(regionInfo[], *start, size, *end)    [1,2,3,4]
2fh: filled, *stop = olist       (objectInfo[], *start, size, *end)    [1,2,3,4]

[[Use oreserve() as ounreserve()]]
[[Use oxchg() as omove()]]
[[Use olist() as ostat()]]

Page
40h: pback(*page, *endpoint, count, valueStart)

Empty
50h: #

Rspace
[[ Rationale: These functions really only exist since we don't have enough
   syscall arguments to encode the desired rspace directly into syscalls. ]]
61h: ignored, *rspace = rsrc   (ignored, *rspace, *thread, count)      [1,2,3,4]
62h: ignored, *rspace = rdst   (ignored, *rspace, *thread, count)      [1,2,3,4]
63h: ignored, *rspace = rsrcdst(ignored, *rspace, *thread, count)      [1,2,3,4]

Thread
70h: #

Endpoint
80h: erecv     (*endpoint, arg[], argmax, *blockParams|*blockThread)
81h: esend     (*endpoint, arg[], argmax, *blockParams|*blockThread)
82h: epoll     (*endpoint, count, maxTimeFrac, maxTime)
88h: efastcall (*endpoint, arg0, arg1, arg2)                           [1,2,3,4]
8Bh: efastcall4(*endpoint, arg0, arg1, arg[])                          [ , , ,4]
8Ch: efastcall5(*endpoint, arg0, arg1, arg[])                          [ , , ,4]
8Dh: efastcall6(*endpoint, arg0, arg1, arg[])                          [ , , ,4]
8Eh: efastcall7(*endpoint, arg0, arg1, arg[])                          [ , , ,4]
8Fh: efastcall8(*endpoint, arg0, arg1, arg[])                          [ , , ,4]

X86
[[ Rationale: x86(-64) specific syscalls are designed to have RETURN2 as
   PARAMATER3 since the x86(-64) syscall calling convention has these registers
   aliasing. Additionally, RETURN1 is usually choosen to be !zero to easily
   detect errors and since zero is useful. ]]

211h: *fs, zero = x86setfs(ignored, *fs)                               [1,2, , ]
212h: *gs, zero = x86setgs(ignored, *gs)                               [1,2, , ]
214h: *fs, zero = x86getfs(ignored)                                    [1, , , ]
215h: *gs, zero = x86getgs(ignored)                                    [1, , , ]

X86 Object
220h: zero, arg = x86setesr(*endpoint, entryAddress, arg[], argmax)    [ ,2,3, ]
221h: zero, arg = x86intendpoint(*endpoint, vector)                    [ ,2, , ]

X86 Ints
240h: zero, vector = x86iassign(*ints, *endpoint, vector)              [ ,2,3, ]

X86 Ports
250h: zero, count = x86pgrant(*ports, *thread, count)

------------------
Calling Convention
------------------
This section specifies the argument passing conventions for each supported arch-
itecture.

[[ X86
We have both INT 0x6A and 0x6B as syscall interrupts. The primary difference is
that INT 0x6A works like SYSCALL where the passed IP is always the next
instruction, and INT 0x6B works like SYSENTER where you have to pass the return
IP, which could be useful for tail-syscalls. ]]

%%%
X86
%%%
word_t size is 4 bytes

Entry
	EAX = Syscall Vector
	EDI = Argument 1 (if Syscall Args >= 1)
	ESI = Argument 2 (if Syscall Args >= 2)
	EDX = Argument 3 (if Syscall Args >= 3)

	If INT 0x6A, INT 0x6B, or SYSENTER is used then
		ECX = Argument 4 (if Syscall Args == 4)
	Else If SYSCALL is used then
		EBX = Arugment 4 (if Syscall Args == 4) 

	If SYSENTER or INT 0x6B is used then
		EBX = Return EIP
		EBP = Return ESP

	If SYSCALL is used then
		ECX = Return EIP (set by SYSCALL instruction)

Return
	EAX = Return 1
	EDX = Return 2
	All other registers preserved, unless a paramater is `Return %`

%%%%%%
X86-64
%%%%%%
word_t size is 8 bytes

Entry
	RAX = Syscall Vector
	RDI = Argument 1 (if Syscall Args >= 1)
	RSI = Argument 2 (if Syscall Args >= 2)
	RDX = Argument 3 (if Syscall Args >= 3)

	If INT 0x6A, INT 0x6B, or SYSENTER is used then
		RCX = Argument 4 (if Syscall Args == 4)
	Else If SYSCALL is used then
		RBX = Arugment 4 (if Syscall Args == 4) 

	If SYSENTER or INT 0x6B is used then
		RBX = Return RIP
		RBP = Return RSP

	If SYSCALL is used then
		RCX = Return RIP (set by SYSCALL instruction)

Return
	RAX = Return 1
	RDX = Return 2
	All other registers preserved, unless a paramater is `Return %`


--------
Pointers
--------
All pointers passed to syscalls are automically aligned (downwards) to the
alignment of word_t.


-------
Objects
-------
Objects are the primary way protected kernel data is stored in ATMM.

00h: OPAGE     Page
01h: OEMPTY    Empty
02h: ORSPACE   Resource Space
03h: OTHREAD   Thread
04h: OENDPOINT Endpoint
X86
80h: OX86INTS  Interrupts
81h: OX86PORTS Ports


------------
Object Flags
------------
Bit
 0- 7: FOBJTYPE Object type (see Section: Objects)
 8-12: FSUGGEST
       8: FSEXPAND
31-12: FRESTRICT
       12: FNOREAD     Object cannot be read  from
       13: FNOWRITE    Object cannot be written to
       14: FSTATIC     Memory's physical address cannot be moved
       15: FCONTINUOUS Object's physical memory is continuous
       16: FNOLAZY     Object cannot be lazily-allocated (aka. copy-on-write)
       17: FNOSWAP     Object cannot be swapped
       31-27: FCACHEMODE
              00h: FCACHEDEFAULT Default caching mode for architecture
              1Fh: FNOCACHE      All caching is disabled
              X86
              00h: FX86WRITEBACK
              02h: FX86WRITECOMBINING
              03h: FX86WRITETHROUGH
              04h: FX86WRITEPROTECT
       X86
       22: FNOEXEC     Object cannot be executed from

------------
Region Flags
------------
Bit
  0: RNOREAD
  1: RNOWRITE
  2: RNOKERNEL


-----
Perms
-----
Bit
 0: PREAD   Object can be read  from
 1: PWRITE  Object can be written to
 2: PSOURCE Object can be used as a source object
 3: PDEST   Object can be used as a destination object
 4: 
 5: 
 6: 
 7: 


------
Errors
------
0: ENOMEM Out of memory
   [[ 0 is choosen for ENOMEM as it is faster to check and ENOMEM is usually the
      most commonly checked. ]]
1: EARCH  Architecture cannot support requested feature or combination of flags
2: EADDR  Invalid address
3: ECLEAR Endpoint was cleared
4: EFLAGS Invalid combination of flags or invalid value
5: ENOSYS No permission for given syscall / invalid syscall number
6: EINUSE Given object is in use
7: EINVAL Invalid value
8: EOTIME Operation timed out


----------
Structures
----------
Structures are composed of entirely word_t's and can be represented as arrays.
The format shown is
	[word_index] field

%%%%%%%%%%%%%%
syscall vector
%%%%%%%%%%%%%%
[0][ :12] Reserved (0)
[0][11:2] Syscall Number
[0][ 1:0] Syscall Args - 1


%%%%%%%%
msyscall
%%%%%%%%
[0] Syscall Vector
[1] Reserved (0)
[2] *Return 1
[3] *Return 2
[4] Paramater 1
[5] Paramater 2
[6] Paramater 3
[7] Paramater 4


%%%%%%%
sysinfo
%%%%%%%
[10h] SwapStoreBits

[200h + OBJTYPE * 4]: Object Size
[201h + OBJTYPE * 4]: Object Size log2
[202h + OBJTYPE * 4]: True Object Size

[Default] Reserved (0)


%%%%%%%%%%%
allocParams
%%%%%%%%%%%
[0] log2align
[1] addrMin
[2] addrMax
[3] physlog2align
[4] physAddrMinLow
[5] physAddrMinHigh
[6] physAddrMaxLow
[7] physAddrMaxHigh

%%%%%%%%%%%
blockParams
%%%%%%%%%%%
[0] maxTimeFrac
[1] maxTime
[2] *blockThread
[3] reserved

%%%%%%%%
physAddr
%%%%%%%%
[0] physAddrLow
[1] physAddrHigh

%%%%%%%%%%
regionInfo
%%%%%%%%%%
[0] addrLow
[1] addrHigh
[2] sizeLow
[3] sizeHigh

%%%%%%%%%%
objectInfo
%%%%%%%%%%
[0] perms
[1] addr
[2] size
[3] xsize
[4] permsLowerBound
[5] permsUpperBound
[6] physAddrLow
[7] physAddrHigh

----
Time
----
Time is represented in two parts, seconds (time) and their fractional component
(timeFrac.) The time taken in seconds can be calculated as
	time + timeFrac / (1 << bits(word_t))

The operating system holds an accumalator of how much &time has elapsed
(readable using syselapse()). This value wraps when bits &time[:16] are all set.
[[ We could not return &time in selapse() if &time[:16] were all set since that
   would indicate an error. ]]


---------------
Resource Spaces
---------------
Resource Spaces are esentially synonyms for address spaces. Threads have set
rspaces which are used for source and destination objects.
